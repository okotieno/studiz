import { Args, Mutation, Query, Resolver } from '@nestjs/graphql';
import { <%= className %>BackendService } from '@studiz/backend/<%= fileName %>-backend-service';
import { Create<%= className %>InputDto } from '../dto/create-<%= fileName %>-input.dto';
import { BadRequestException, Body, UseGuards, ValidationPipe } from '@nestjs/common';
import { EventEmitter2 } from '@nestjs/event-emitter';
import { <%= className %>CreatedEvent } from '../events/<%= fileName %>-created.event';
import { JwtAuthGuard } from '@studiz/backend/auth';
import { PermissionGuard, Permissions, PermissionsEnum } from '@studiz/backend/permission-service';
import { IQueryParam, <%= className %>Model } from '@studiz/backend/db';
import { Update<%= className %>InputDto } from '../dto/update-<%= fileName %>-input.dto';
import { <%= className %>UpdatedEvent } from '../events/<%= fileName %>-updated.event';
import { Delete<%= className %>InputDto } from '../dto/delete-<%= fileName %>-input.dto';
import { <%= className %>DeletedEvent } from '../events/<%= fileName %>-deleted.event';

@Resolver()
export class <%= className %>Resolver {

  constructor(private <%= propertyName %>Service: <%= className %>BackendService, private eventEmitter: EventEmitter2) {
  }

  @Query(() => <%= className %>Model)
  <%= propertyNamePlural %>(
    @Args('query') query: IQueryParam
  ) {
    return this.<%= propertyName %>Service.findAll({
      ...query,
      filters: query?.filters ?? []
    });
  }

  @Query(() => <%= className %>Model)
  async <%= propertyName %>(
    @Args('id') id: number
  ) {
    return this.<%= propertyName %>Service.findById(id);
  }

  @Mutation()
  @UseGuards(JwtAuthGuard, PermissionGuard)
  @Permissions(PermissionsEnum.Create<%= className %>)
  async create<%= className %>(@Body(new ValidationPipe()) params: Create<%= className %>InputDto) {
    const <%= propertyName %> = await this.<%= propertyName %>Service.create({
      ...params
    });

    this.eventEmitter.emit(
      '<%= fileName %>.created',
      new <%= className %>CreatedEvent(<%= propertyName %>)
    );

    return {
      message: 'Successfully created <%= fileName %>',
      data: <%= propertyName %>
    };
  }

  @Mutation()
  @UseGuards(JwtAuthGuard, PermissionGuard)
  @Permissions(PermissionsEnum.Update<%= className %>)
  async update<%= className %>(@Body(new ValidationPipe()) params: Update<%= className %>InputDto) {
    const <%= propertyName %> = await this.<%= propertyName %>Service.findById(params.id);
    if (<%= propertyName %>) {
      await <%= propertyName %>?.update(params.params);
      await <%= propertyName %>?.save();

      this.eventEmitter.emit(
        '<%= propertyName %>.updated',
        new <%= className %>UpdatedEvent(<%= propertyName %>)
      );
      return {
        message: 'Successfully created <%= propertyName %>',
        data: <%= propertyName %>
      };
    }
    throw new BadRequestException('No <%= fileName %> found');
  }

    @Mutation()
    @UseGuards(JwtAuthGuard, PermissionGuard)
    @Permissions(PermissionsEnum.Delete<%= className %>)
    async delete<%= className %>(
      @Body(new ValidationPipe()) { id }: Delete<%= className %>InputDto
    ) {
      const <%= propertyName %> = await this.<%= propertyName %>Service.findById(id) as <%= className %>Model;

      await <%= propertyName %>.destroy()
      this.eventEmitter.emit(
        '<%= fileName %>.deleted',
        new <%= className %>DeletedEvent(<%= propertyName %>)
      );

      return {
        message: 'Successfully deleted <%= fileName %>',
        data: <%= propertyName %>,
      };
    }
}
